go_RNA_binding_inf <- "../../trizol_dosage/raw/uniprot_go_RNA_binding.tsv"
glycoproteins_inf <- "../../trizol_dosage/raw/glycoproteins.tsv"
tm_proteins_inf <- "../../trizol_dosage/raw/tm_proteins.tsv"
tf_inf <- "../../trizol_dosage/raw/uniprot_go_nucleic_acid_binding_transcription_factor_activity.tsv"
pm_inf <- "../../trizol_dosage/raw/uniprot_go_PM.tab"
org_cycl_inf <- "../../trizol_dosage/raw/uniprot_go_org_cyclic_binding.tsv"
go_RNA_binding_df <- read.table(go_RNA_binding_inf, header=TRUE, sep="\t")
glycoproteins_df <- read.table(glycoproteins_inf, header=TRUE, sep="\t")
tm_proteins_df <- read.table(tm_proteins_inf, header=TRUE, sep="\t")
tf_df <- read.table(tf_inf, header=TRUE)
pm_df <- read.table(pm_inf, header=TRUE)
org_cycl_df <- read.table(org_cycl_inf, header=TRUE)
geiger_df <- read.csv("../../trizol_dosage/raw/Geiger_et_al/Geiger_et_al_2012_U2OS_peptides_plus_master.tsv",
header=TRUE, sep="\t")
geiger_df <- geiger_df[geiger_df$unique==1,]
geiger_df <- geiger_df[geiger_df$master_protein!="",]
geiger_u2os_proteins <- unique(geiger_df$master_protein)
# use the maximum abundance across the 3 replicates as the abundance for the peptide and aggregate to proteins
agg_geiger_max <- aggregate(geiger_df$Max, by=list(geiger_df$master_protein), FUN=mean)
colnames(agg_geiger_max) <- c("master_protein", "Max")
protein_info_df <- merge(glycoproteins_df, agg_geiger_max, by.x="protein", by.y="master_protein", all=TRUE)
protein_info_df$gieger <- !is.na(protein_info_df$Max)
exprs_df_annotated <- merge(exprs_df, protein_info_df, by.x="accession", by.y="protein", all=TRUE)
exprs_df_annotated$identified <- exprs_df_annotated$accession %in% exprs_df$accession
exprs_df_annotated$expression_bin <- as.numeric(cut2(exprs_df_annotated$Max, g=6))
for (column in colnames(glycoproteins_df)[2:length(colnames(glycoproteins_df))]){
exprs_df_annotated[[column]][is.na(exprs_df_annotated[[column]])] <- 0
}
exprs_df_annotated$glycoprotein = exprs_df_annotated$accession %in% unique(glycoproteins_df$protein)
exprs_df_annotated$RBP = exprs_df_annotated$accession%in% unique(go_RNA_binding_df$Entry)
exprs_df_annotated$TF = exprs_df_annotated$accession %in% unique(tf_df$Entry)
exprs_df_annotated$PM = exprs_df_annotated$accession %in% unique(pm_df$Entry)
exprs_df_annotated$org_cycl = exprs_df_annotated$accession %in% unique(org_cycl_df$Entry)
print(head(exprs_df_annotated,10))
RBPs <- unique(go_RNA_binding_df$Entry)
glycoproteins <- unique(glycoproteins_df$protein)
identified_proteins <- unique(exprs_df$accession)
tf_proteins <- unique(tf_df$Entry)
pm_proteins <- unique(pm_df$Entry)
org_cycl_proteins <- unique(org_cycl_df$Entry)
geiger_proteins <- geiger_df$master_protein
makeVennPlot <- function(set1, set2, set3,
set1_name="Identified proteins",
set2_name="RBPs",
set3_name="glycoproteins"){
grid.newpage()
venn.plot <- draw.triple.venn(
area1 = length(set1),
area2 = length(set2),
area3 = length(set3),
n12 = length(intersect(set1, set2)),
n13 = length(intersect(set1, set3)),
n23 = length(intersect(set2, set3)),
n123 = length(intersect(intersect(set1, set2), set3)),
category = c(set1_name, set2_name, set3_name),
fill = c("steelblue2", "orangered2", "green2"),
alpha =.2)
grid.draw(venn.plot)
}
makeVennPlot(identified_proteins, RBPs, glycoproteins)
makeVennPlot(intersect(geiger_proteins, identified_proteins),
intersect(geiger_proteins, RBPs),
intersect(geiger_proteins, glycoproteins))
makeVennPlot(intersect(geiger_proteins, identified_proteins),
intersect(geiger_proteins, pm_proteins),
intersect(geiger_proteins, glycoproteins),
set2_name="PM")
makeVennPlot(intersect(geiger_proteins, identified_proteins),
intersect(geiger_proteins, RBPs),
intersect(geiger_proteins, tf_proteins),
set3_name="TF")
uniprot2ensembl_inf <- "../../trizol_dosage/raw/uniprot2ensembl.tsv"
uniprot2ensembl_df <- read.table(uniprot2ensembl_inf, sep="\t", header=T)
print(length(unique(uniprot2ensembl_df[,1])))
print(length(unique(uniprot2ensembl_df[,2])))
uniprot2ensembl_counts <- table(uniprot2ensembl_df$From)
unique_uniprot2ensembl <- names(uniprot2ensembl_counts)[uniprot2ensembl_counts==1]
print(dim(uniprot2ensembl_df))
print(length(unique_uniprot2ensembl))
uniprot2ensembl_df <- uniprot2ensembl_df[uniprot2ensembl_df$From %in% unique_uniprot2ensembl,]
print(dim(uniprot2ensembl_df))
exprs_df_annotated  <- merge(exprs_df_annotated, uniprot2ensembl_df, by.x="accession", by.y="From")
head(uniprot2ensembl_inf)
head(uniprot2ensembl_df)
uniprot2ensembl_inf <- "../../trizol_dosage/raw/uniprot2ensembl.tsv"
uniprot2ensembl_df <- read.table(uniprot2ensembl_inf, sep="\t", header=T)
print(length(unique(uniprot2ensembl_df[,1])))
print(length(unique(uniprot2ensembl_df[,2])))
uniprot2ensembl_counts <- table(uniprot2ensembl_df$From)
unique_uniprot2ensembl <- names(uniprot2ensembl_counts)[uniprot2ensembl_counts==1]
print(dim(uniprot2ensembl_df))
print(length(unique_uniprot2ensembl))
uniprot2ensembl_df <- uniprot2ensembl_df[uniprot2ensembl_df$From %in% unique_uniprot2ensembl,]
print(dim(uniprot2ensembl_df))
exprs_df_annotated  <- merge(exprs_df_annotated, uniprot2ensembl_df, by.x="accession", by.y="From")
exprs_df_annotated_geiger <- exprs_df_annotated[exprs_df_annotated$gieger==T,]
tmp_df <- exprs_df_annotated_geiger[duplicated(exprs_df_annotated_geiger$To),]
dup <- tmp_df[is.finite(tmp_df$To),"To"]
print(exprs_df_annotated_geiger[exprs_df_annotated_geiger$To %in% dup, c("accession", "To")])
protein_characteristics_inf <- "../../trizol_dosage/analysis/human_protein_hydrophobicity.tsv"
protein_characteristics_df <- read.table(protein_characteristics_inf, header=TRUE)
protein_characteristics_df <- protein_characteristics_df[protein_characteristics_df$swissprot == "True",]
protein_characteristics_df$log_length <- log(protein_characteristics_df$length, 2)
print(dim(protein_characteristics_df))
print(protein_characteristics_df)
exprs_df_annotated_geiger <- merge(exprs_df_annotated_geiger, protein_characteristics_df[,c("accession", "log_length")],
by="accession")
normrank <- function(array){
ra <- rank(array)
return(ra/max(ra))
}
print(normrank(c(1,2,3,1,12,3)))
exprs_df_annotated_geiger$norm_log_length <- normrank(exprs_df_annotated_geiger$log_length)
exprs_df_annotated_geiger$norm_abundance <- normrank(exprs_df_annotated_geiger$Max)
harm_mean <- function(values){
return(1/mean(1/values))
}
print(harm_mean(c(1,2,1,2,3,10)))
print(mean(c(1,2,1,2,3,10)))
exprs_df_annotated_geiger$bias_mean <- apply(exprs_df_annotated_geiger[,c("norm_log_length", "norm_abundance")],
MARGIN=1, FUN=harm_mean)
head(exprs_df_annotated_geiger)
?rank
head(protein_characteristics_df)
prot.len <- read.delim("../../trizol_dosage/analysis/human_protein_hydrophobicity.tsv",header=T,sep="\t")
head(prot.len)
log2(379)
bias.df = data.frame(exp.bias = rowMax(exprs(agg.u2os)),UNIPROT = fData(agg.u2os)$master_protein,SYMBOL = sapply(strsplit(as.character(fData(agg.u2os)$protein_description),"\\||\\_"),"[[",3)) # n = 7507
prot.len$loglen = log2(prot.len$length)
biad.df.len = merge(bias.df,prot.len[,c("accession","loglen")],by.x="UNIPROT",by.y="accession",all.x=T,all.y=F)
bias.df.len = merge(bias.df,prot.len[,c("accession","loglen")],by.x="UNIPROT",by.y="accession",all.x=T,all.y=F)
dim(bias.df)
dim(bias.df.len)
head(bias.df.len)
prot.len <- read.delim("../../trizol_dosage/analysis/human_protein_hydrophobicity.tsv",header=T,sep="\t")
bias.df.len = merge(bias.df,prot.len[,c("accession","len.bias")],by.x="UNIPROT",by.y="accession",all.x=T,all.y=F)
prot.len$len.bias = log2(prot.len$length)
bias.df.len = merge(bias.df,prot.len[,c("accession","len.bias")],by.x="UNIPROT",by.y="accession",all.x=T,all.y=F)
head(bias.df.len)
bias.df.len$h.bias = 2*bias.df.len$exp.bias*bias.df.len$len.bias/(bias.df.len$exp.bias+bias.df.len$len.bias)
head(bias.df.len)
exprs_df_annotated_geiger <- exprs_df_annotated[exprs_df_annotated$gieger==T,]
tmp_df <- exprs_df_annotated_geiger[duplicated(exprs_df_annotated_geiger$To),]
dup <- tmp_df[is.finite(tmp_df$To),"To"]
print(exprs_df_annotated_geiger[exprs_df_annotated_geiger$To %in% dup, c("accession", "To")])
head(exprs_df_annotated_geiger)
exprs_df_annotated_geiger <- exprs_df_annotated[exprs_df_annotated$gieger==T,]
tmp_df <- exprs_df_annotated_geiger[duplicated(exprs_df_annotated_geiger$To),]
dup <- tmp_df[is.finite(tmp_df$To),"To"]
print(exprs_df_annotated_geiger[exprs_df_annotated_geiger$To %in% dup, c("accession", "To")])
head(exprs_df_annotated_geiger)
uv.enrich.go = runGoseq(uv.qm$query,bias.df,bias.df$h.bias,geiger.uniprot.go,0.01)
runGoseq <- function(genelist,bglist,bias=NULL,cat.oligo=NULL,signif=0.05){
# setting up goseq object
all.genes.comp = rep(0,nrow(bglist))
names(all.genes.comp) = rownames(bglist)
all.genes.comp[which(names(all.genes.comp) %in% unique(genelist))] = 1
table(all.genes.comp)
# Remove missing values
comp.no.missing = all.genes.comp[which(!is.na(names(all.genes.comp)))]
table(comp.no.missing)
# Running the function to calculate weights - with user provided bias or default gene length bias
pwf.comp = nullp(comp.no.missing,bias.data = bias)
# Running goseq enrichment using default mapping within goseq or user provided mapper
goseq.comp.cat = goseq(pwf.comp,gene2cat = cat.oligo)
goseq.comp.cat$BH_over_represented_pvalue = p.adjust(goseq.comp.cat$over_represented_pvalue,method = "BH")
enriched.goseq.comp.cat = goseq.comp.cat[which(goseq.comp.cat$BH_over_represented_pvalue <= signif),]
return(list(goseq.comp.cat,enriched.goseq.comp.cat))
}
uv.enrich.go = runGoseq(uv.qm$query,bias.df,bias.df$h.bias,geiger.uniprot.go,0.01)
pwf.comp = nullp(comp.no.missing,bias.data = bias)
goseq.comp.cat = goseq(pwf.comp,gene2cat = cat.oligo)
bias
bias = bias.df$exp.bias
pwf.comp = nullp(comp.no.missing,bias.data = bias)
goseq.comp.cat = goseq(pwf.comp,gene2cat = cat.oligo)
goseq.comp.cat = goseq(pwf.comp,gene2cat = cat.oligo)
goseq.comp.cat$BH_over_represented_pvalue = p.adjust(goseq.comp.cat$over_represented_pvalue,method = "BH")
enriched.goseq.comp.cat = goseq.comp.cat[which(goseq.comp.cat$BH_over_represented_pvalue <= signif),]
signif = 0.01
enriched.goseq.comp.cat = goseq.comp.cat[which(goseq.comp.cat$BH_over_represented_pvalue <= signif),]
enriched.goseq.comp.cat
dim(enriched.goseq.comp.cat)
prot.len <- read.delim("../../trizol_dosage/analysis/human_protein_hydrophobicity.tsv",header=T,sep="\t")
prot.len <- read.delim("../../trizol_dosage/analysis/human_protein_hydrophobicity.tsv",header=T,sep="\t")
prot.len$len.bias = log2(prot.len$length)
prot.len$len.bias = log2(prot.len$length)
bias.df.len = merge(bias.df,prot.len[,c("accession","len.bias")],by.x="UNIPROT",by.y="accession",all.x=T,all.y=F)
bias.df.len = merge(bias.df,prot.len[,c("accession","len.bias")],by.x="UNIPROT",by.y="accession",all.x=T,all.y=F)
bias.df.len$h.bias = 2*bias.df.len$exp.bias*bias.df.len$len.bias/(bias.df.len$exp.bias+bias.df.len$len.bias)
uv.enrich.go = runGoseq(uv.qm$query,bias.df.len,bias.df.len$h.bias,geiger.uniprot.go,0.01)
head(bias.df.len)
uv.enrich.go = runGoseq(uv.qm$query,bias.df.len,bias.df.len$h.bias,geiger.uniprot.go,0.01)
rownames(bias.df.len) = bias.df$UNIPROT
uv.enrich.go = runGoseq(uv.qm$query,bias.df.len,bias.df.len$h.bias,geiger.uniprot.go,0.01)
uv.enrich.go
uv.enrich.go[[2]]
uv.enrich.interpro = runGoseq(uv.qm$query,bias.df.len,bias.df.len$h.bias,geiger.uniprot.go,0.05) # 1441/1505 proteins are present in Geiger et al.,
uv.enrich.interpro[[2]]
uv.enrich.interpro = runGoseq(uv.qm$query,bias.df.len,bias.df.len$h.bias,geiger.uniprot.doms,0.05) # 1441/1505 proteins are present in Geiger et al.,
uv.enrich.interpro[[2]]
head(exprs(agg.u2os))
print(dim(exprs_df_annotated_geiger))
saveRDS(exprs_df_annotated_geiger[,c("accession","bias_mean")],"../../trizol_dosage/analysis/geiger_harmonic-mean-bias.tsv"")
saveRDS(exprs_df_annotated_geiger[,c("accession","bias_mean")],"../../trizol_dosage/analysis/geiger_harmonic-mean-bias.tsv")
?saveRDS
saveRDS(exprs_df_annotated_geiger[,c("accession","bias_mean")],file = "../../oligodT/analysis/geiger_harmonic-mean-bias.tsv")
protein_characteristics_inf <- "../../trizol_dosage/analysis/human_protein_hydrophobicity.tsv"
protein_characteristics_df <- read.table(protein_characteristics_inf, header=TRUE)
protein_characteristics_df <- protein_characteristics_df[protein_characteristics_df$swissprot == "True",]
protein_characteristics_df$log_length <- log(protein_characteristics_df$length, 2)
print(dim(protein_characteristics_df))
print(protein_characteristics_df)
exprs_df_annotated_geiger <- merge(exprs_df_annotated_geiger, protein_characteristics_df[,c("accession", "log_length")],
by="accession")
normrank <- function(array){
ra <- rank(array)
return(ra/max(ra))
}
print(normrank(c(1,2,3,1,12,3)))
exprs_df_annotated_geiger$norm_log_length <- normrank(exprs_df_annotated_geiger$log_length)
exprs_df_annotated_geiger$norm_abundance <- normrank(exprs_df_annotated_geiger$Max)
harm_mean <- function(values){
return(1/mean(1/values))
}
print(harm_mean(c(1,2,1,2,3,10)))
print(mean(c(1,2,1,2,3,10)))
exprs_df_annotated_geiger$bias_mean <- apply(exprs_df_annotated_geiger[,c("norm_log_length", "norm_abundance")],
MARGIN=1, FUN=harm_mean)
head(exprs_df_annotated_geiger)
saveRDS(exprs_df_annotated_geiger[,c("accession","bias_mean")],file = "../../oligodT/analysis/geiger_harmonic-mean-bias.tsv")
prot.len.bias <- read.delim("../../oligodT/analysis/geiger_harmonic-mean-bias.tsv",header=T,sep="\t")
prot.len.bias <- read.delim("../analysis/geiger_harmonic-mean-bias.tsv",header=T,sep="\t")
prot.len.bias <- read.delim("../analysis/geiger_harmonic-mean-bias.tsv",header=T,sep="\t")
prot.len.bias <- readRDS("../analysis/geiger_harmonic-mean-bias.tsv",header=T,sep="\t")
prot.len.bias <- readRDS("../analysis/geiger_harmonic-mean-bias.tsv")
head(prot.len.bias)
bias.df.len = merge(bias.df,prot.len.bias,by.x="UNIPROT",by.y="accession",all.x=T,all.y=F)
rownames(bias.df.len) = bias.df$UNIPROT
uv.enrich.go = runGoseq(uv.qm$query,bias.df.len,bias.df.len$h.bias,geiger.uniprot.go,0.01)
runGoseq <- function(genelist,bglist,bias=NULL,cat.oligo=NULL,signif=0.05){
# setting up goseq object
all.genes.comp = rep(0,nrow(bglist))
names(all.genes.comp) = rownames(bglist)
all.genes.comp[which(names(all.genes.comp) %in% unique(genelist))] = 1
table(all.genes.comp)
# Remove missing values
comp.no.missing = all.genes.comp[which(!is.na(names(all.genes.comp)))]
table(comp.no.missing)
# Running the function to calculate weights - with user provided bias or default gene length bias
pwf.comp = nullp(comp.no.missing,bias.data = bias)
# Running goseq enrichment using default mapping within goseq or user provided mapper
goseq.comp.cat = goseq(pwf.comp,gene2cat = cat.oligo)
goseq.comp.cat$BH_over_represented_pvalue = p.adjust(goseq.comp.cat$over_represented_pvalue,method = "BH")
enriched.goseq.comp.cat = goseq.comp.cat[which(goseq.comp.cat$BH_over_represented_pvalue <= signif),]
return(list(goseq.comp.cat,enriched.goseq.comp.cat))
}
uv.enrich.go = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.go,0.01)
uv.enrich.go[[2]]
uv.enrich.interpro = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.doms,0.05) # 1441/1505 proteins are present in Geiger et al.,
uv.enrich.interpro[[2]]
write.table(data.frame(uv.enrich.go[[2]][,c(1,6:7,4:5,2,8)]),paste(outdir,"Trizol-UV-dosage_GO-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(data.frame(uv.enrich.interpro[[2]]),paste(outdir,"Trizol-UV-dosage_Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
go.e = uv.enrich.go[[2]][,c(1,6:7,4:5,2,8)]
go.e
dim(go.e)
go.e = uv.enrich.go[[2]][,c(1,6:7,4:5,2,8)] # 60
doms.e = uv.enrich.interpro[[2]]
dims.e
doms.e
plot(log2(go.e$numDEInCat/go.e$numInCat))
plot(log2(go.e$numDEInCat/go.e$numInCat),-log10(go.e$BH_over_represented_pvalue))
write.table(data.frame(uv.enrich.go[[2]][,c(1,6:7,4:5,2,8)]),paste(outdir,"Trizol-UV-dosage_GO-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(data.frame(uv.enrich.interpro[[2]]),paste(outdir,"Trizol-UV-dosage_Interpro-enrichment.txt",sep="/"),sep="\t",row.names=F,quote=F)
source("../../../proteomics/R/Utility.R")
length(uv.qm$query)
dim(bias.df)
plotGOTerms(uv.enrich.go[[2]], 1531, 7507,BH_filter=0.01, enrichment_filter=2, numObs_filter=50,switch_axes=F, plot_top=20)
GO_df$enrichment <- log((GO_df$numDEInCat / GO_df$numInCat) / (GO_df$numInCat / len_background),2)
source("../../../proteomics/R/Utility.R")
plotGOTerms(uv.enrich.go[[2]], 1531, 7507,BH_filter=0.01, enrichment_filter=2, numObs_filter=50,switch_axes=F, plot_top=20)
plotGOTerms(uv.enrich.go[[2]], 1531, 7507,BH_filter=0.01, enrichment_filter=2, numObs_filter=10,switch_axes=F, plot_top=20)
plotGOTerms(uv.enrich.go[[2]], 1531, 7507,BH_filter=0.01, enrichment_filter=2, numObs_filter=10,switch_axes=F, plot_top=20,switch_axes=T)
plotGOTerms(uv.enrich.go[[2]], 1531, 7507,BH_filter=0.01, enrichment_filter=2, numObs_filter=10,switch_axes=F, plot_top=20)
plotGOTerms(uv.enrich.go[[2]], 1531, 7507,BH_filter=0.01, enrichment_filter=2, numObs_filter=20,switch_axes=F, plot_top=20)
plotGOTerms(uv.enrich.go[[2]], 1531, 7507,BH_filter=0.01, enrichment_filter=2, numObs_filter=30,switch_axes=F, plot_top=20)
go.e = uv.enrich.go[[1]][,c(1,6:7,4:5,2,8)] # 60
plot(log2(go.e$numDEInCat/go.e$numInCat),-log10(go.e$BH_over_represented_pvalue))
plot(-log2(go.e$numDEInCat/go.e$numInCat),-log10(go.e$BH_over_represented_pvalue))
plot(-log2(go.e$numDEInCat/go.e$numInCat))
plot(log2(go.e$numDEInCat/go.e$numInCat))
plot(-log2(go.e$numDEInCat/go.e$numInCat))
uv.enrich.go = runGoseq(uv.qm$query,bias.df.len,bias.df.len$exp.bias,geiger.uniprot.go,0.01)
uv.enrich.interpro = runGoseq(uv.qm$query,bias.df.len,bias.df.len$exp.bias,geiger.uniprot.doms,0.05)
uv.enrich.go.len = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.go,0.01)
uv.enrich.interpro.len = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.doms,0.05)
?goseq
uv.enrich.go = runGoseq(uv.qm$query,bias.df,bias.df$exp.bias,geiger.uniprot.go,0.01)
head(bias.df)
rownames(bias.df) = bias.df$UNIPROT
uv.enrich.go = runGoseq(uv.qm$query,bias.df,bias.df$exp.bias,geiger.uniprot.go,0.01)
uv.enrich.interpro = runGoseq(uv.qm$query,bias.df.len,bias.df.len$exp.bias,geiger.uniprot.doms,0.05)
uv.enrich.interpro[[2]]
rownames(bias.df.len) = bias.df.len$UNIPROT
uv.enrich.go.len = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.go,0.01)
uv.enrich.go.len = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.go,0.01)
uv.enrich.interpro.len = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.doms,0.05)
uv.enrich.interpro = runGoseq(uv.qm$query,bias.df.len,bias.df.len$exp.bias,geiger.uniprot.doms,0.05)
head(bias.df)
bias.df[which(bias.df$exp.bias == 0),]
bias.df$exp.bias[which(bias.df$exp.bias == 0)] = NA
uv.enrich.go = runGoseq(uv.qm$query,bias.df,bias.df$exp.bias,geiger.uniprot.go,0.01)
uv.enrich.interpro = runGoseq(uv.qm$query,bias.df.len,bias.df.len$exp.bias,geiger.uniprot.doms,0.05)
head(exprs(agg.u2os))
u2os <- read.delim(paste(indir,"Geiger_et_al_2012_U2OS_peptides_plus_master.txt",sep="/"),sep="\t",header=T)
u2os <- read.delim(paste(indir,"Geiger_et_al_2012_U2OS_peptides_plus_master.txt",sep="/"),sep="\t",header=T)
head(u2os)
dim(u2os) # 68621 21
?impute
u2os.samp = data.frame(sample=c("Intensity.U2OS_1","Intensity.U2OS_2","Intensity.U2OS_3"),rep=c(1,2,3))
rownames(u2os.samp) = u2os.samp$sample
(u2os.filt2[,c(5:7)]
)
head(u2os$filt2)
u2os <- read.delim(paste(indir,"Geiger_et_al_2012_U2OS_peptides_plus_master.txt",sep="/"),sep="\t",header=T)
u2os <- read.delim(paste(indir,"Geiger_et_al_2012_U2OS_peptides_plus_master.txt",sep="/"),sep="\t",header=T)
head(u2os)
dim(u2os) # 68621 21
u2os.filt1 = u2os[which(u2os$unique == 1 & u2os$master_protein != "" & u2os$crap_protein != 1),]
u2os.filt2 = u2os.filt1[,c(5:6,17,11:16,18:19)]
head(u2os.filt2)
head(u2os.filt2)
head(u2os.filt1)
res.u2os <- MSnSet(exprs = as.matrix(u2os.filt2[,c(5:7)]),fData=u2os.filt2[,-c(5:7)],pData = u2os.samp)
res.u2os
agg.u2os = combineFeatures(res.u2os,groupBy = fData(res.u2os)$master_protein,cv = T,fun = "median")
head(exprs(res.u2os))
head(exprs(agg.u2os))
u2os.filt2[which(u2os.filt2$master_protein == "AOAVF1"),]
u2os.filt2[which(u2os.filt2$master_protein == "A0AVF1"),]
?combineFeatures
filt2$count.missing = rowSums(is.na(filt2[,c(5:7)]))
u2os.filt2$count.missing = rowSums(is.na(u2os.filt2[,c(5:7)]))
u2os.filt2$Missing = FALSE
u2os.filt2$Missing[which(u2os.filt2$count.missing > 0)] = TRUE
head(u2os.filt2)
table(u2os.filt2$count.missing)
?median
agg.u2os = combineFeatures(res.u2os,groupBy = fData(res.u2os)$master_protein,cv = T,fun = "median",na.rm=T)
head(exprs(agg.u2os))
u2os.filt2[which(u2os.filt2$master_protein == "AOAVF1"),]
u2os.filt2[which(u2os.filt2$master_protein == "A0AVF1"),]
bias.df = data.frame(exp.bias = rowMax(exprs(agg.u2os)),UNIPROT = fData(agg.u2os)$master_protein,SYMBOL = sapply(strsplit(as.character(fData(agg.u2os)$protein_description),"\\||\\_"),"[[",3)) # n = 7507
bias.df = data.frame(exp.bias = sapply(exprs(agg.u2os),2,max,na.rm=T),UNIPROT = fData(agg.u2os)$master_protein,SYMBOL = sapply(strsplit(as.character(fData(agg.u2os)$protein_description),"\\||\\_"),"[[",3)) # n = 7507
bias.df = data.frame(exp.bias = apply(exprs(agg.u2os),2,max,na.rm=T),UNIPROT = fData(agg.u2os)$master_protein,SYMBOL = sapply(strsplit(as.character(fData(agg.u2os)$protein_description),"\\||\\_"),"[[",3)) # n = 7507
?apply
apply(exprs(agg.u2os),2,max)
apply(exprs(agg.u2os),2,max,na.rm=T)
apply(exprs(agg.u2os),1,max,na.rm=T)
bias.df = data.frame(exp.bias = apply(exprs(agg.u2os),1,max,na.rm=T),UNIPROT = fData(agg.u2os)$master_protein,SYMBOL = sapply(strsplit(as.character(fData(agg.u2os)$protein_description),"\\||\\_"),"[[",3)) # n = 7507
head(bias.df)
bias.df.len = merge(bias.df,prot.len.bias,by.x="UNIPROT",by.y="accession",all.x=T,all.y=F)
rownames(bias.df) = bias.df$UNIPROT
rownames(bias.df.len) = bias.df.len$UNIPROT
uv.enrich.go = runGoseq(uv.qm$query,bias.df,bias.df$exp.bias,geiger.uniprot.go,0.01)
uv.enrich.interpro = runGoseq(uv.qm$query,bias.df.len,bias.df.len$exp.bias,geiger.uniprot.doms,0.05)
uv.enrich.go.len = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.go,0.01)
uv.enrich.go.len = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.go,0.01)
uv.enrich.interpro.len = runGoseq(uv.qm$query,bias.df.len,bias.df.len$bias_mean,geiger.uniprot.doms,0.05)
plotGOTerms(uv.enrich.go[[2]], 1531, 7507,BH_filter=0.01, enrichment_filter=2, numObs_filter=30,switch_axes=F, plot_top=20)
getwd()
dim(qnt.prot)
knitr::opts_chunk$set(fig.width=12,fig.height=8,warning=FALSE, message=FALSE)
#tidy.opts=list(width.cutoff=80)
#---------------------------------------------------------------------------
# Author 	      : Manasa Ramakrishna, mr325@le.ac.uk
# Date started 	: 4th August, 2017
# Last modified : 4th August, 2017
# Aim 		      : To take a look at first SILAC labelled LOPIT data on Trizol
# Depends       : On 'silacFunctions.R'. Make sure they are in the same directory
# Notes         : Works on data from Rayner's first experiments
#---------------------------------------------------------------------------
# Invoking libraries
library(MSnbase)
library(gplots)
library.dynam.unload()
getLoadedDLLs()
# Chunk 1: global_options
knitr::opts_chunk$set(fig.width=8,fig.height=6,fig.show='hold',warning=FALSE, message=FALSE,tidy = TRUE,tidy.opts=list(width.cutoff=50))
# Chunk 2: 00_Startup
suppressMessages(library(reshape2))
suppressMessages(library(ggplot2))
suppressMessages(library(ggsci))
suppressMessages(library(dplyr))
suppressMessages(library(MSnbase))
suppressMessages(library(ggbiplot))
suppressMessages(library(pRoloc))
suppressWarnings(library(mygene))
suppressWarnings(library(data.table))
suppressWarnings(library(patchwork))
#Setting working directories
# Note: Change the next line of card to point to your working directory
wd = "~/Documents/Work/TTT/15_UPR-Hypoxia-RHarvey/"
setwd(wd)
#getwd()
# Declaring input and output directories
indir = paste(wd,"Input",sep="/")
outdir = paste(wd,"Output",sep = "/")
plotdir = paste(wd,"Plots",sep="/")
# If output and plots directory exist, clear them out and start afresh
if (exists(outdir)){
system(paste0("rm -r",outdir))
}
if (exists(plotdir)){
system(paste0("rm -r",plotdir))
}
dir.create(outdir)
dir.create(plotdir)
# Chunk 3: 01_Reading-in-data
# 1. List of known RBPs across cell lines in the XRNAX paper (Table S2)
xrnax = read.delim(paste(indir,"xrnax-genelist.txt",sep="/"),sep="\t",header=T)
# Check how many are common to the cell lines in the XRNAX paper
xrnax %>%
dplyr::select(MCF7.RBP:ihRBP) %>%
apply(2, table,useNA="always")
# Filter to only keep those that have been found by at least one cell line
xrnax.rbps = xrnax %>%
dplyr::filter(!is.na(MCF7.RBP) | !is.na(HEK293.RBP) | !is.na(HeLa.RBP)) %>%
dplyr::select(c(Uniprot.ID:Protein.name,MCF7.RBP:ihRBP))
#rownames(xrnax.rbps) = xrnax.rbps$Uniprot.ID
# Chunk 4: 1a_RBPs-from-SILAC-in-Cambridge
# 2. List of RBPs from SILAC experiments using OOPS with 2 or more wash steps and CL/NC Ratio >1 i.e more than two-fold change in abundance (Table S1)
oops = read.delim(paste(indir,"oops-genelist.txt",sep="/"),sep="\t",header=T, row.names=NULL)
oops.rbps = oops %>%
dplyr::filter(step > 1 & CL_NC_Ratio >= 1.0) %>%
dplyr::select(master_protein,step, RBP_glyco) %>%
dplyr::filter(RBP_glyco != "Novel RBP, Glycoprotein") %>%
dplyr::distinct(master_protein, .keep_all = TRUE)
rownames(oops.rbps) = oops.rbps$master_protein
# Merge both lists n = 2807
merged.rbp = union(xrnax$Uniprot.ID,oops$master_protein)
write.table(data.frame(merged.rbp),paste(outdir,"RBP-list-for-uniprot.txt",sep="/"),sep="\t",row.names=F,quote=F)
# Chunk 5: 1b_Subset-proteins-of-interest
# Annotate OOPS/RIC RBPs with GO terms from Uniprot
go.rbp = read.delim(paste(indir,"human-rbp-uniprot.txt",sep="/"),sep="\t",stringsAsFactors = F,header=T)
colnames(go.rbp)[6] = "Gene.name"
# Hypoxia response
hypox = go.rbp[with(go.rbp, grepl("hypoxia", paste(Gene.ontology..biological.process., Gene.ontology..cellular.component.,Gene.ontology..molecular.function.))),]
er = go.rbp[with(go.rbp, grepl("endoplasmic reticulum", paste(Gene.ontology..biological.process., Gene.ontology..cellular.component.,Gene.ontology..molecular.function.))),]
upr = go.rbp[with(go.rbp, grepl("unfolded protein", paste(Gene.ontology..biological.process., Gene.ontology..cellular.component.,Gene.ontology..molecular.function.))),]
colnames(upr)[6] = colnames(er)[6] = colnames(hypox)[6] = "Gene.name"
print(length(upr$Gene.name))
print(length(hypox$Gene.name))
print(length(er$Gene.name))
# Plot intersect
library(venn)
library(gplots)
library(RColorBrewer)
input.v = list("Endoplasmic\nReticulum" = er$Gene.name,"Unfolded Protein\nResponse"=upr$Gene.name,Hypoxia = hypox$Gene.name)
pdf(paste(plotdir,"UPR-Hypoxia-ER-RBPs-Venn.pdf",sep="/"))
v = venn::venn(input.v,zcolor=brewer.pal(n = 3, name = "Set1"),cexil = 1,cexsn=1)
dev.off()
venn::venn(input.v,zcolor=brewer.pal(n = 3, name = "Set1"),cexil = 1,cexsn=1)
# Chunk 6: 2a_Cancer-fitness-genes
# HT-29 was not classified in the Tissue column so did this manually
# Fitness dataframe
fitness<-read.delim(paste(indir,"Cancer-Fitness-S2.txt",sep="/"),sep="\t",header=F,stringsAsFactors = F)
dim(fitness)
colnames(fitness) = fitness[4,]
rownames(fitness) = fitness$Gene.CellLine
# Metadata
metadat = data.frame(t(fitness[1:4,2:ncol(fitness)]))
colnames(metadat) = c("Tissue","Cancer.Type","CMP.id","Cell.line")
# Resize 'fitness' dataframe and only keep RBP rows
fitness = fitness[5:nrow(fitness),]
dim(fitness)
# Reshape
all.fit = reshape2::melt(fitness,id = "Gene.CellLine",na.rm=T)
colnames(all.fit) = c("Gene","Cell.line","Fitness")
all.fit = left_join(all.fit,metadat)
head(all.fit)
# Chunk 7: 2b_Adding-GO-information-to-fitness-genes
# Add RBP information
all.fit = left_join(all.fit,go.rbp,by=c("Gene"="Gene.name"))
all.fit$is.rbp = TRUE
all.fit$is.rbp[which(is.na(all.fit$Entry))] = FALSE
head(all.fit)
# Plot distribution of RBPs by Tissue
ggplot(all.fit,aes(x= reorder(Tissue, -is.rbp),fill = is.rbp))+geom_bar()+theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Chunk 8: 3a_RBPs-by-cancer-type
# There are 2807 proteins that are RBPs in the
fit.rbp = fitness[go.rbp$Gene.name,]
dim(fit.rbp)
# Reshape the fitness dataframe
library(tidyr)
fit.g = reshape2::melt(fit.rbp,id = "Gene.CellLine",na.rm=T)
colnames(fit.g) = c("Gene","Cell.line","Fitness")
# RBP stats by fitness and cell-line
cell.fit.rbp.tab = round(table(fit.g$Cell.line,fit.g$Fitness)*100/rowSums(table(fit.g$Cell.line,fit.g$Fitness)),2)
# RBP stats by fitness and cell-line
fit.g = left_join(fit.g,metadat)
tis.fit.rbp.tab = round(table(fit.g$Tissue,fit.g$Fitness)*100/rowSums(table(fit.g$Tissue,fit.g$Fitness)),2)
ctype.fit.rbp.tab = round(table(fit.g$Cancer.Type,fit.g$Fitness)*100/rowSums(table(fit.g$Cancer.Type,fit.g$Fitness)),2)
# Write lists of proteins to file
upr
# Write lists of proteins to file
write.table(upr,paste(outdir,"UPR-genes.txt"sep="/"),sep="\t",row.names=F,quote=F)
# Write lists of proteins to file
write.table(upr,paste(outdir,"UPR-genes.txt",sep="/"),sep="\t",row.names=F,quote=F)
# Write lists of proteins to file
write.table(hypox,paste(outdir,"Hypoxia-genes.txt",sep="/"),sep="\t",row.names=F,quote=F)
write.table(er,paste(outdir,"ER-genes.txt",sep="/"),sep="\t",row.names=F,quote=F)
